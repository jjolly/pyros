#!/usr/bin/python3

import os, sys, gc
import argparse
import struct
import zipfile
import zlib
import hashlib
import xml.etree.ElementTree as ET
import types # For binding seek and tell to ZipExtFile

def validateZipFile(fp):
    endrec = zipfile._EndRecData(fp)
    if endrec:
        if endrec[zipfile._ECD_ENTRIES_TOTAL] == 0 and endrec[zipfile._ECD_SIZE] == 0 and endrec[zipfile._ECD_OFFSET] == 0:
            return True     # Empty zipfiles are still zipfiles
        elif endrec[zipfile._ECD_DISK_NUMBER] == endrec[zipfile._ECD_DISK_START]:
            fp.seek(endrec[zipfile._ECD_OFFSET])    # Central directory is on the same disk
            if fp.tell() == endrec[zipfile._ECD_OFFSET] and endrec[zipfile._ECD_SIZE] >= zipfile.sizeCentralDir:
                data = fp.read(zipfile.sizeCentralDir)   # CD is where we expect it to be
                if len(data) == zipfile.sizeCentralDir:
                    centdir = struct.unpack(zipfile.structCentralDir, data) # CD is the right size
                    if centdir[zipfile._CD_SIGNATURE] == zipfile.stringCentralDir:
                        return True         # First central directory entry  has correct magic number
    return False

def isValidZipFile(zh):
    valid = True
    try:
        if not hasattr(zh, "read"):
            zh = open(zh, "rb")
        valid = validateZipFile(zh)
    except zipfile.BadZipFile:
        valid = False
    return valid

def seekZipExtFile(self, offset, from_what = 0):
    """Seek method for ZipExtFile

    Allows repositioning within a zipfile. Does not perform actual reposition,
    but rather reads forward if the seek is ahead, or reads from zero if the
    seek is behind the current position."""
    curr_pos = self.tell()
    new_pos = offset # Default to seek from start
    if from_what == 1: # Seek from current offset
        new_pos = curr_pos + offset
    elif from_what == 2: # Seek from EOF
        new_pos = self._seeklen + offset

    if new_pos > self._seeklen:
        new_pos = self._seeklen

    if new_pos < 0:
        new_pos = 0

    read_offset = new_pos - curr_pos
    buff_offset = read_offset + self._offset

    if buff_offset >= 0 and buff_offset < len(self._readbuffer):
        # Just move the _offset index if the new position is in the _readbuffer
        self._offset = buff_offset
        read_offset = 0
    elif read_offset < 0:
        # Position is before the current position. Reset the ZipExtFile
        # object and read up to the new position.
        self._fileobj.seek(self._startcomp)
        self._running_crc = self._startcrc
        self._compress_left = self._complen
        self._left = self._seeklen
        self._readbuffer = b''
        self._offset = 0
        self._decompressor = zipfile._get_decompressor(self._compress_type)
        self._eof = False
        read_offset = new_pos

    # The read offset should be positive or zero.
    # Keep reading until the offset is zero
    while read_offset > 0:
        read_len = min(1024 * 1024, read_offset)
        self.read(read_len)
        read_offset -= read_len

    return self.tell()

def tellZipExtFile(self):
    offset = self._seeklen - self._left - len(self._readbuffer) + self._offset
    return offset

def makeseekable(zh):
    try:
        if zh.seekable():
            return zh
    except Exception:
        pass
    # Keep track of the start of compressed data in order to reset to that point
    zh._startcomp = zh._fileobj.tell()
    # This is usually zero, but no chances were taken
    zh._startcrc  = zh._running_crc
    # These two values need to be restored when the object is reset
    zh._complen   = zh._compress_left
    zh._seeklen   = zh._left
    # Yes, yes we are
    zh.seekable   = lambda: True
    zh.seek       = types.MethodType(seekZipExtFile, zh)
    zh.tell       = types.MethodType(tellZipExtFile, zh)
    return zh

def GatherFileData(f):
    crc32 = zlib.crc32(b'')
    sha1 = hashlib.sha1()
    filelen = 0
    f.seek(0)
    for i in f:
        crc32 = zlib.crc32(i, crc32)
        sha1.update(i)
        filelen += len(i)

    return filelen, "{:08x}".format(crc32), sha1.hexdigest()

def ParseZipToParent(root, zf, sha1zip=False, recurse=-1):
    for zi in zf.infolist():
        attr = {"name": zi.filename}
        if not zi.filename.endswith('/'):
            with zf.open(zi) as zh:
                zh = makeseekable(zh)
                _, extname = os.path.splitext(zi.filename)
                if extname.lower() == ".zip" and isValidZipFile(zh) and recurse != 0:
                    ParseZipToParent(ET.SubElement(root, "zip", attr), zipfile.ZipFile(zh), sha1zip, recurse - 1)
                else:
                    attr["crc32"] = "{:08x}".format(zi.CRC)
                    attr["file_size"] = str(zi.file_size)
                    attr["compress_size"] = str(zi.compress_size)
                    if sha1zip:
                        flen, fcrc32, sha1 = GatherFileData(zh)
                        assert flen == zi.file_size and fcrc32 == icrc32, "In {}, file {} size {} vs. info size {}, file crc32 {} vs. info crc32 {}".format(zf.filename, zi.filename, flen, zi.file_size, fcrc32, icrc32)
                        attr["sha1"] = sha1
                    ET.SubElement(root, "file", attr)

def ParsePathToParent(root, srcpath, sha1zip=False, recurse=-1):
    for entry in sorted(os.listdir(srcpath)):
        attr = {"name": entry}
        entrypath = os.path.join(srcpath, entry)
        print("\r{}".format(entrypath), end='', file=sys.stderr)
        if os.path.isdir(entrypath):
            ParsePathToParent(ET.SubElement(root, "dir", attr), entrypath, sha1zip)
        elif os.path.isfile(entrypath):
            _, extname = os.path.splitext(entry)
            if extname.lower() == '.zip' and isValidZipFile(entrypath) and recurse != 0:
                ParseZipToParent(ET.SubElement(root, "zip", attr), zipfile.ZipFile(entrypath), sha1zip, recurse - 1)
            else:
                filelen, crc32, sha1 = GatherFileData(open(entrypath, "rb"))
                attr["crc32"] = crc32
                attr["file_size"] = str(filelen)
                attr["sha1"] = sha1
                ET.SubElement(root, "file", attr)

def ParseFileToParent(root, src, unzipped):
    try:
        srctree = ET.parse(src)
    except ET.ParseError:
        # Ug, at least a clrmamepro list format should be parsed
        raise NotImplementedError("Unable to parse non-xml datfile formats")

    srcroot = srctree.getroot()

    if srcroot.tag == "romset":
        root.extend(srcroot)
    elif srcroot.tag == "mame" or srcroot.tag == "datafile":
        for e in srcroot:
            if e.tag == "game" or e.tag == "machine":
                mname = e.get("name")
                if mname in unzipped:
                    z = ET.SubElement(root, "dir", {"name": mname})
                else:
                    z = ET.SubElement(root, "zip", {"name": "{}.zip".format(mname)})
                for r in e:
                    if r.tag == "rom":
                        attr = {}
                        attr["name"] = r.get("name")
                        attr["crc32"] = r.get("crc")
                        attr["file_size"] = r.get("size")
                        if "sha1" in r:
                            attr["sha1"] = r.get("sha1")
                        ET.SubElement(z, "file", attr)

def BuildRAT(src, unzipped=[], sha1zip=False, recurse=-1):
    tree = ET.ElementTree(ET.Element("romset"))
    root = tree.getroot()

    if isinstance(src, str) and os.path.isdir(src):
        ParsePathToParent(root, src[0], sha1zip, recurse)
    elif isinstance(src, str) or hasattr(src, 'read'):
        ParseFileToParent(root, src, unzipped)
    elif hasattr(src, '__iter__'):
        for i in src:
            _, fname = os.path.split(i)
            dname, _ = os.path.splitext(fname)
            if os.path.isdir(i):
                ParsePathToParent(ET.SubElement(root, "dir", {"name": dname}), i, unzipped)
            else:
                ParseFileToParent(ET.SubElement(root, "romset", {"name": dname}), i, unzipped)

    return tree

"""
I want to make an XML that actually represents the content of the romset.
So often a romset does not match the DATfile - the "machine"s are uncompress,
or some are compressed while others are not, or the whole DATfile is a
compressed file filled with compressed files. It's madness and it needs to
stop.

This script creates a "Romset Datfile", or RAT, that has three elements: dir,
file, and zip. The dir can contain dir, file, and zip subelements. The zip
can contain file and zip subelements. The file is a leaf subelement.

The script uses either a directory or one or more datfiles to generate the RAT.
If a directory is provided, then all files and subdirectories are parsed in the
directory. If one datfile is provided, then a one-to-one translation is made.
Each machine in the datfile will be made into a zip subelement. If the provided
file is a MAME XMLList, Then God help our immortal souls (TODO).
If multiple datfiles are provided, then each datfile is considered a zipfile
at the root of the generated RAT file.

An option is provided to specify machines in the datfile to add as dirs,
not zips.
"""
def main():
    aparse = argparse.ArgumentParser(description='Create Romset DAT (RAT) file from directory')
    aparse.add_argument('-o', '--output', default=None, help='Output RAT to file <output>')
    aparse.add_argument('-r', '--recurse', type=int, default=-1, help='Depth to recurse into zipfile. Ignored if DAT is used for the source. -1 to recurse infinitely (default). 0 to not recurse')
    aparse.add_argument('-s', '--sha1zip', action='store_true', help='Produce SHA1 hash for all files in zips')
    aparse.add_argument('-u', '--unzipped', action='append', default=[], help='Store specific DAT or Machine unzipped')
    aparse.add_argument('src', nargs='+', help='Source directories or files')

    args = aparse.parse_args()

    if len(args.src) == 1:
        tree = BuildRAT(args.src[0], unzipped=args.unzipped, sha1zip=args.sha1zip, recurse=args.recurse)
    else:
        tree = BuildRAT(args.src, unzipped=args.unzipped, sha1zip=args.sha1zip, recurse=args.recurse)

    print("", file=sys.stderr)

    tree.write(sys.stdout, encoding="unicode", xml_declaration=True)

if __name__ == '__main__':
    main()
